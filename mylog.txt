run demo.ipython.py
execdemo()
# #Adapted from scipy conference talk by f.perez and b.graner (Texas '07)
# # <demo> silent
# import sys
# from IPython import ipapi
# ip = ipapi.get()
# ip.options.automagic = True
# print "The '?' provides help in many contexts"
?
execdemo()
# # <demo> silent
# print """Magic commands are very useful.
#
# They provide support for altering the behavior of IPython
# and system features/programs.
#
# Use %lsmagic to list all magic commands.
#
# Use '?' for help on what specific magic commands do.
#
# """
execdemo()
# # <demo> silent
# print r"""Learn about objects with '?' and '??' and tab completion.
#     - '?' will show doc strings.
#     - '??' will show source code.
#
# # import code
#
# # code?
#
# # code??
#
# # code. <tab>
#[Out]# 6
#
# """
#[Out]# 7
import code
code?
code??
execdemo()
# # <demo> silent
# print """Learn about functions too.
#
# # code.Command<tab>
#
# # code.CommandCompiler?
#
# # code.CommandCompiler??
#
# """
execdemo()
# # <demo> silent
# print """Searching for a function in a large code base.
#
# # import numpy
#
# # numpy.*cos*?
#
# """
execdemo()
# # <demo> silent
# print """Let's see what commands we have used by checking our history.
#
# # hist
#
# or
#
# # hist -n (no line numbers)
#
# """
execdemo()
# # <demo> silent
# print """Let's execute a command from history
#
# # x = 4
#
# # x += 1
#
# # hist
#
# # exec In[somenumber]
#
# """
x=4
x+=1
hist
exec In[37]
x
exec In[37]
x
In?
execdemo()
# # <demo> silent
# print """Log what you type.
#
# # logstart -o -r -t mylog.txt append
#
# Do logstart? for agument details.
#
# Run a bunch of python commands.
#
# # \"cat\" your log file to see what it logged.
#
# # stop log with the \"logstop\" magic command
# """
log -o -r -t mylog.txt append
# Tue, 02 Aug 2011 00:10:05
cat mylog.txt
# Tue, 02 Aug 2011 00:10:07
cat mylog.txt
# Tue, 02 Aug 2011 00:10:08
cat mylog.txt
# Tue, 02 Aug 2011 00:10:18
execdemo()
# Tue, 02 Aug 2011 00:10:18
# <demo> silent
# Tue, 02 Aug 2011 00:10:18
def concat(a, b):
# Tue, 02 Aug 2011 00:10:18
    return a + b
# Tue, 02 Aug 2011 00:10:18
print """Puts parens around for you.
# Tue, 02 Aug 2011 00:10:18
# concat 'hello', 'world'
# Tue, 02 Aug 2011 00:10:18
comma in front of concat will quote words.
# Tue, 02 Aug 2011 00:10:18
# ,concat hello world
# Tue, 02 Aug 2011 00:10:18
"""
# Tue, 02 Aug 2011 00:10:21
logstop
ls
run -i demo.ipython.py
whos
execdemo
#[Out]# <IPython.demo.ClearIPDemo object at 0x10136c0d0>
execdemo()
# #Adapted from scipy conference talk by f.perez and b.graner (Texas '07)
# # <demo> silent
# import sys
# from IPython import ipapi
# ip = ipapi.get()
# ip.options.automagic = True
# print "The '?' provides help in many contexts"
?
!gvim ipython.py
execdemo()
#[Out]# []
# # <demo> silent
#[Out]# []
# print """Magic commands are very useful.
#
# They provide support for altering the behavior of IPython
# and system features/programs.
#
# Use %lsmagic to list all magic commands.
#[Out]# <module 'code' from '/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/code.pyc'>
#
# Use '?' for help on what specific magic commands do.
#
# """
%lsmagic
dirs
dirs .
run ?
execdemo()
# # <demo> silent
# print r"""Learn about objects with '?' and '??' and tab completion.
#     - '?' will show doc strings.
#     - '??' will show source code.
#
# # import code
#
# # code?
#
# # code??
#
# # code. <tab>
#
# """
import code
code
code?
code??
execdemo()
# # <demo> silent
#[Out]# 6
# print """Learn about functions too.
#
#[Out]# 7
# # code.Command<tab>
#
# # code.CommandCompiler?
#
# # code.CommandCompiler??
#
# """
code.CommandCompiler?
code.CommandCompiler??
execdemo()
# # <demo> silent
# print """Searching for a function in a large code base.
#
# # import numpy
#
# # numpy.*cos*?
#
# """
import numpy
numpy.*cos*
numpy.*cos*?
execdemo()
# # <demo> silent
# print """Let's see what commands we have used by checking our history.
#
# # hist
#
# or
#
# # hist -n (no line numbers)
#
# """
history
history -n
execdemo()
# # <demo> silent
# print """Let's execute a command from history
#
# # x = 4
#
# # x += 1
#
# # hist
#
# # exec In[somenumber]
#
# """
x = 4
x +=1
hist
exec?
exec?
exec in[49]
exec In[49]
x
exec In[49]
x
In?
execdemo()
# # <demo> silent
# print """Log what you type.
#
# # logstart -o -r -t mylog.txt append
#
# Do logstart? for agument details.
#
# Run a bunch of python commands.
#
# # \"cat\" your log file to see what it logged.
#
# # stop log with the \"logstop\" magic command
# """
# Tue, 02 Aug 2011 20:45:54
blah blah blah
# Tue, 02 Aug 2011 20:46:02
!cat mylog.txt
# Tue, 02 Aug 2011 20:46:05
!cat mylog.txt
# Tue, 02 Aug 2011 20:46:29
execdemo()
# Tue, 02 Aug 2011 20:46:29
# <demo> silent
# Tue, 02 Aug 2011 20:46:29
def concat(a, b):
# Tue, 02 Aug 2011 20:46:29
    return a + b
# Tue, 02 Aug 2011 20:46:29
print """Puts parens around for you.
# Tue, 02 Aug 2011 20:46:29
# concat 'hello', 'world'
# Tue, 02 Aug 2011 20:46:29
comma in front of concat will quote words.
# Tue, 02 Aug 2011 20:46:29
# ,concat hello world
# Tue, 02 Aug 2011 20:46:29
"""
# Tue, 02 Aug 2011 20:46:43
concat
# Tue, 02 Aug 2011 20:46:55
concat 'hello', 'world'
#[Out]# 'helloworld'
# Tue, 02 Aug 2011 20:47:05
,concat hello world
#[Out]# 'helloworld'
# Tue, 02 Aug 2011 20:47:31
execdemo()
# Tue, 02 Aug 2011 20:47:31
# <demo> silent
# Tue, 02 Aug 2011 20:47:31
print """%run magic command for running python scripts.
# Tue, 02 Aug 2011 20:47:31
# run -i ipython_tutorial/args 'these' 'are' 'passed' 'to' 'args.py'
# Tue, 02 Aug 2011 20:47:31
"""
# Tue, 02 Aug 2011 20:47:49
run
# Tue, 02 Aug 2011 20:48:16
run -i ipython_tutorial//args 'these' 'are' 'passed' 'to' 'args.py'
# Tue, 02 Aug 2011 20:48:43
cat ipython_tutorial/args
# Tue, 02 Aug 2011 20:48:44
cat ipython_tutorial/args.py
# Tue, 02 Aug 2011 20:49:06
execdemo()
# Tue, 02 Aug 2011 20:49:06
# <demo> silent
# Tue, 02 Aug 2011 20:49:06
print """%run magic command for running python scripts.
# Tue, 02 Aug 2011 20:49:06
Variables from simple.py are put into your ipython session
# Tue, 02 Aug 2011 20:49:06
# run -i ipython_tutorial/simple
# Tue, 02 Aug 2011 20:49:06
"""
# Tue, 02 Aug 2011 20:49:19
run -i ipython_tutorial/simple.py
# Tue, 02 Aug 2011 20:49:25
s
#[Out]# 'a simple string'
# Tue, 02 Aug 2011 20:49:26
y
#[Out]# 99
# Tue, 02 Aug 2011 20:49:33
s+s
#[Out]# 'a simple stringa simple string'
# Tue, 02 Aug 2011 20:49:40
execdemo()
# Tue, 02 Aug 2011 20:49:40
# <demo> silent
# Tue, 02 Aug 2011 20:49:40
import os
# Tue, 02 Aug 2011 20:49:40
if not os.path.exists('ipython_scratch'):
# Tue, 02 Aug 2011 20:49:40
    os.mkdir('ipython_scratch')
# Tue, 02 Aug 2011 20:49:40
import util
# Tue, 02 Aug 2011 20:49:40
for i in range(5):
# Tue, 02 Aug 2011 20:49:40
    f = util.fixpath('ipython_scratch/foo_%s' % i)
# Tue, 02 Aug 2011 20:49:40
    open(f, 'w').close()
# Tue, 02 Aug 2011 20:49:40
print """capture file information.
# Tue, 02 Aug 2011 20:49:40
# files = !ls ipython_scratch/foo_*
# Tue, 02 Aug 2011 20:49:40
"""
# Tue, 02 Aug 2011 20:50:11
ls ipython_scratch/foo_*
# Tue, 02 Aug 2011 20:50:44
fs = ls ipython_scratch/foo_*
# Tue, 02 Aug 2011 20:50:49
fs = _ip.magic("sc -l =ls ipython_scratch/foo_*")
# Tue, 02 Aug 2011 20:50:51
fs
#[Out]# ['ipython_scratch/foo_0', 'ipython_scratch/foo_1', 'ipython_scratch/foo_2', 'ipython_scratch/foo_3', 'ipython_scratch/foo_4']
# Tue, 02 Aug 2011 20:50:55
fs
#[Out]# ['ipython_scratch/foo_0', 'ipython_scratch/foo_1', 'ipython_scratch/foo_2', 'ipython_scratch/foo_3', 'ipython_scratch/foo_4']
# Tue, 02 Aug 2011 20:50:57
fs.p
#[Out]# [path('ipython_scratch/foo_0'), path('ipython_scratch/foo_1'), path('ipython_scratch/foo_2'), path('ipython_scratch/foo_3'), path('ipython_scratch/foo_4')]
# Tue, 02 Aug 2011 20:50:59
fs.n
#[Out]# 'ipython_scratch/foo_0\nipython_scratch/foo_1\nipython_scratch/foo_2\nipython_scratch/foo_3\nipython_scratch/foo_4'
# Tue, 02 Aug 2011 20:51:05
fs.l
#[Out]# ['ipython_scratch/foo_0', 'ipython_scratch/foo_1', 'ipython_scratch/foo_2', 'ipython_scratch/foo_3', 'ipython_scratch/foo_4']
# Tue, 02 Aug 2011 20:51:08
fs.s
#[Out]# 'ipython_scratch/foo_0 ipython_scratch/foo_1 ipython_scratch/foo_2 ipython_scratch/foo_3 ipython_scratch/foo_4'
# Tue, 02 Aug 2011 20:51:15
fs.grep('foo*')
#[Out]# ['ipython_scratch/foo_0', 'ipython_scratch/foo_1', 'ipython_scratch/foo_2', 'ipython_scratch/foo_3', 'ipython_scratch/foo_4']
# Tue, 02 Aug 2011 20:51:23
execdemo()
# Tue, 02 Aug 2011 20:51:23
# <demo> silent
# Tue, 02 Aug 2011 20:51:23
print """Can capture shell ouput inside of a loop.
# Tue, 02 Aug 2011 20:51:23
for i,f in enumerate(files):
# Tue, 02 Aug 2011 20:51:23
    new_name = f.replace('foo', 'bar')
# Tue, 02 Aug 2011 20:51:23
    # !cp $f $new_name   # remove the '#' in front of this line
# Tue, 02 Aug 2011 20:51:23
"""
# Tue, 02 Aug 2011 20:52:21
for i,f in enumerate(files):
# Tue, 02 Aug 2011 20:52:36
ls
# Tue, 02 Aug 2011 20:52:42
ls ipython_tutorial/
# Tue, 02 Aug 2011 20:52:47
ls ipython_scratch/foo_
# Tue, 02 Aug 2011 20:52:52
cpaste
# Tue, 02 Aug 2011 20:53:14
cpaste
# Tue, 02 Aug 2011 20:53:28
execdemo()
# Tue, 02 Aug 2011 20:53:28
# <demo> silent
# Tue, 02 Aug 2011 20:53:28
print """Let's go back to run command.
# Tue, 02 Aug 2011 20:53:28
With the run command we can time our programs.
# Tue, 02 Aug 2011 20:53:28
# run -t ipython_tutorial/wordfreqs.py ipython.py
# Tue, 02 Aug 2011 20:53:28
"""
# Tue, 02 Aug 2011 20:53:55
run -t ipython_tutorial/wordfreqs.py ipython.py
# Tue, 02 Aug 2011 20:54:17
execdemo()
# Tue, 02 Aug 2011 20:54:17
# <demo> silent
# Tue, 02 Aug 2011 20:54:17
print """ With the run command we can profile our programs.
# Tue, 02 Aug 2011 20:54:17
# run -p ipython_tutorial/wordfreqs.py ipython.py
# Tue, 02 Aug 2011 20:54:17
"""
# Tue, 02 Aug 2011 20:54:36
run -p ipython_tutorial/wordfreqs.py ipython.py
# Tue, 02 Aug 2011 20:56:40
execdemo()
# Tue, 02 Aug 2011 20:56:40
# <demo> silent
# Tue, 02 Aug 2011 20:56:40
print """ With the run command we can debug our programs.
# Tue, 02 Aug 2011 20:56:40
Break point and go up and down the stack.
# Tue, 02 Aug 2011 20:56:40
# run -d -b37 ipython_tutorial/wordfreqs.py ipython.py
# Tue, 02 Aug 2011 20:56:40
"""
# Tue, 02 Aug 2011 20:57:29
run -d -b37 ipython_tutorial/wordfreqs.py ipython.py
#[Out]# [(1, 'all'), (2, 'code'), (2, 'help'), (1, 'logstart'), (2, 'show'), (1, 'contexts"'), (1, 'code.CommandCompiler?'), (1, 'not'), (1, 'session'), (1, 'comma'), (2, 'file'), (1, "util.fixpath('ipython_scratch/foo_%s'"), (2, 'go'), (1, 'bunch'), (1, 'details.'), (1, '"""capture'), (1, "'world'"), (1, 'ouput'), (1, 'information.'), (1, '-o'), (1, 'code??'), (2, '-i'), (1, 'source'), (1, '4'), (1, '-r'), (1, 'ipython_tutorial/simple'), (1, '"""Puts'), (1, 'ipapi'), (1, ',concat'), (1, 'return'), (1, 'around'), (3, '"""Let\'s'), (1, 'strings.'), (1, 'b.graner'), (18, 'stop'), (1, 'history.'), (1, 'util'), (1, 'scipy'), (2, 'front'), (1, 'world'), (1, '\\"cat\\"'), (1, 'new_name'), (1, 'code.CommandCompiler??'), (1, 'execute'), (5, 'magic'), (1, "'#'"), (1, 'level'), (1, 'altering'), (3, 'With'), (1, 'list'), (18, '"""'), (1, 'base.'), (1, 'specific'), (1, 'this'), (1, 'each'), (2, 'debug'), (2, 'x'), (1, '(default)'), (1, '#Adapted'), (1, 'range(5):'), (1, 'back'), (1, '$f'), (1, 'up'), (1, "'bar')"), (2, 'see'), (1, 'i)'), (2, 'are'), (1, 'remove'), (4, 'our'), (1, 'mylog.txt'), (1, "'w').close()"), (1, 'append'), (1, "'to'"), (1, 'large'), (66, '#'), (1, 'Run'), (9, 'for'), (1, '+'), (1, "'args.py'"), (3, 'hist'), (1, 'provides'), (17, 'print'), (6, 'import'), (1, 'True'), (1, 'command.'), (1, 'parens'), (4, 'we'), (10, 'run'), (1, 'loop.'), (1, '-d'), (1, 'capture'), (1, 'objects'), (1, 'logged.'), (1, 'put'), (1, 'completion.'), (1, '"""Learn'), (2, 'by'), (1, 'change'), (2, 'log'), (1, 'on'), (3, 'commands'), (1, 'f.perez'), (6, 'of'), (34, '<demo>'), (1, '"""Searching'), (1, 'os'), (1, 'or'), (1, '+='), (2, "'??'"), (2, 'Use'), (1, '-n'), (1, '$new_name'), (1, 'Context'), (1, "'passed'"), (1, 'point'), (1, 'too.'), (1, 'into'), (1, "'are'"), (1, 'down'), (1, 'ipython'), (1, 'numbers)'), (2, 'IPython'), (2, 'commands.'), (1, '"The'), (2, 'your'), (1, 'conference'), (4, 'from'), (17, 'silent'), (3, 'ipython_tutorial/wordfreqs.py'), (3, 'to'), (1, 'support'), (1, 'system'), (1, 'Break'), (1, 'modes.'), (4, "'?'"), (1, 'numpy'), (1, '-p'), (1, 'function'), (1, 'you.'), (1, 'shell'), (2, '-t'), (3, 'python'), (1, 'Plain'), (2, 'about'), (1, "os.path.exists('ipython_scratch'):"), (1, 'ipython_scratch/foo_*'), (1, 'b):'), (2, '"""%run'), (2, 'scripts.'), (1, "os.mkdir('ipython_scratch')"), (2, 'line'), (1, 'ipython_tutorial/error.py'), (3, 'with'), (3, 'ipython.py'), (1, 'b'), (1, 'f'), (1, 'checking'), (1, 'inside'), (1, 'ip.options.automagic'), (3, 'xmode'), (1, 'agument'), (1, 'In[somenumber]'), (1, 'i,f'), (3, 'will'), (4, 'can'), (1, 'behavior'), (1, 'many'), (1, '\\"logstop\\"'), (1, 'def'), (1, 'history'), (6, 'and'), (1, 'files'), (1, 'type.'), (1, 'simple.py'), (1, 'have'), (1, "'these'"), (1, 'ip'), (1, '"""xmode'), (1, 'it'), (1, 'numpy.*cos*?'), (1, "f.replace('foo',"), (1, 'words.'), (1, 'r"""Learn'), (1, 'tab'), (6, 'in'), (1, 'code.Command<tab>'), (1, 'logstart?'), (1, 'if'), (1, 'stack.'), (1, 'Do'), (1, 'functions'), (1, 'do.'), (1, '(Texas'), (1, 'provide'), (3, 'programs.'), (1, "'hello',"), (2, '-'), (1, '(no'), (1, 'useful.'), (1, '1'), (1, 'very'), (1, '!cp'), (1, 'They'), (1, '%lsmagic'), (1, '<tab>'), (1, 'ipython_tutorial/args'), (1, 'you'), (6, '='), (1, 'enumerate(files):'), (1, 'profile'), (1, 'used'), (1, "'07)"), (1, '"""Can'), (1, 'exec'), (1, 'quote'), (1, 'time'), (4, 'what'), (1, 'sys'), (2, 'running'), (1, '"""Log'), (1, 'features/programs.'), (1, '!ls'), (2, 'concat'), (6, 'a'), (1, 'ipapi.get()'), (1, '"""Magic'), (1, 'Verbose'), (1, 'concat(a,'), (1, '-b37'), (1, 'i'), (1, 'doc'), (1, 'Variables'), (1, 'code?'), (1, 'these'), (7, 'command'), (1, 'talk'), (1, 'open(f,'), (8, 'the'), (1, '%'), (1, 'hello'), (2, 'code.')]
#[Out]# {'all': 1, 'code': 2, 'help': 2, 'logstart': 1, 'show': 2, 'contexts"': 1, 'code.CommandCompiler?': 1, 'not': 1, 'session': 1, 'comma': 1, 'file': 2, "util.fixpath('ipython_scratch/foo_%s'": 1, 'go': 2, 'bunch': 1, 'details.': 1, '"""capture': 1, "'world'": 1, 'ouput': 1, 'information.': 1, '-o': 1, 'code??': 1, '-i': 2, 'source': 1, '4': 1, '-r': 1, 'ipython_tutorial/simple': 1, '"""Puts': 1, 'ipapi': 1, ',concat': 1, 'return': 1, 'around': 1, '"""Let\'s': 3, 'strings.': 1, 'b.graner': 1, 'stop': 18, 'history.': 1, 'util': 1, 'scipy': 1, 'front': 2, 'world': 1, '\\"cat\\"': 1, 'new_name': 1, 'code.CommandCompiler??': 1, 'execute': 1, 'magic': 5, "'#'": 1, 'level': 1, 'altering': 1, 'With': 3, 'list': 1, '"""': 18, 'base.': 1, 'specific': 1, 'this': 1, 'each': 1, 'debug': 2, 'x': 2, '(default)': 1, '#Adapted': 1, 'range(5):': 1, 'back': 1, '$f': 1, 'up': 1, "'bar')": 1, 'see': 2, 'i)': 1, 'are': 2, 'remove': 1, 'our': 4, 'mylog.txt': 1, "'w').close()": 1, 'append': 1, "'to'": 1, 'large': 1, '#': 66, 'Run': 1, 'for': 9, '+': 1, "'args.py'": 1, 'hist': 3, 'provides': 1, 'print': 17, 'import': 6, 'True': 1, 'command.': 1, 'parens': 1, 'we': 4, 'run': 10, 'loop.': 1, '-d': 1, 'capture': 1, 'objects': 1, 'logged.': 1, 'put': 1, 'completion.': 1, '"""Learn': 1, 'by': 2, 'change': 1, 'log': 2, 'on': 1, 'commands': 3, 'f.perez': 1, 'of': 6, '<demo>': 34, '"""Searching': 1, 'os': 1, 'or': 1, '+=': 1, "'??'": 2, 'Use': 2, '-n': 1, '$new_name': 1, 'Context': 1, "'passed'": 1, 'point': 1, 'too.': 1, 'into': 1, "'are'": 1, 'down': 1, 'ipython': 1, 'numbers)': 1, 'IPython': 2, 'commands.': 2, '"The': 1, 'your': 2, 'conference': 1, 'from': 4, 'silent': 17, 'ipython_tutorial/wordfreqs.py': 3, 'to': 3, 'support': 1, 'system': 1, 'Break': 1, 'modes.': 1, "'?'": 4, 'numpy': 1, '-p': 1, 'function': 1, 'you.': 1, 'shell': 1, '-t': 2, 'python': 3, 'Plain': 1, 'about': 2, "os.path.exists('ipython_scratch'):": 1, 'ipython_scratch/foo_*': 1, 'b):': 1, '"""%run': 2, 'scripts.': 2, "os.mkdir('ipython_scratch')": 1, 'line': 2, 'ipython_tutorial/error.py': 1, 'with': 3, 'ipython.py': 3, 'b': 1, 'f': 1, 'checking': 1, 'inside': 1, 'ip.options.automagic': 1, 'xmode': 3, 'agument': 1, 'In[somenumber]': 1, 'i,f': 1, 'will': 3, 'can': 4, 'behavior': 1, 'many': 1, '\\"logstop\\"': 1, 'def': 1, 'history': 1, 'and': 6, 'files': 1, 'type.': 1, 'simple.py': 1, 'have': 1, "'these'": 1, 'ip': 1, '"""xmode': 1, 'it': 1, 'numpy.*cos*?': 1, "f.replace('foo',": 1, 'words.': 1, 'r"""Learn': 1, 'tab': 1, 'in': 6, 'code.Command<tab>': 1, 'logstart?': 1, 'if': 1, 'stack.': 1, 'Do': 1, 'functions': 1, 'do.': 1, '(Texas': 1, 'provide': 1, 'programs.': 3, "'hello',": 1, '-': 2, '(no': 1, 'useful.': 1, '1': 1, 'very': 1, '!cp': 1, 'They': 1, '%lsmagic': 1, '<tab>': 1, 'ipython_tutorial/args': 1, 'you': 1, '=': 6, 'enumerate(files):': 1, 'profile': 1, 'used': 1, "'07)": 1, '"""Can': 1, 'exec': 1, 'quote': 1, 'time': 1, 'what': 4, 'sys': 1, 'running': 2, '"""Log': 1, 'features/programs.': 1, '!ls': 1, 'concat': 2, 'a': 6, 'ipapi.get()': 1, '"""Magic': 1, 'Verbose': 1, 'concat(a,': 1, '-b37': 1, 'i': 1, 'doc': 1, 'Variables': 1, 'code?': 1, 'these': 1, 'command': 7, 'talk': 1, 'open(f,': 1, 'the': 8, '%': 1, 'hello': 1, 'code.': 2}
# Tue, 02 Aug 2011 20:58:08
execdemo()
# Tue, 02 Aug 2011 20:58:08
# <demo> silent
# Tue, 02 Aug 2011 20:58:08
print """xmode can change the debug level
# Tue, 02 Aug 2011 20:58:08
# xmode Plain
# Tue, 02 Aug 2011 20:58:08
# xmode Context (default)
# Tue, 02 Aug 2011 20:58:08
# xmode Verbose 
# Tue, 02 Aug 2011 20:58:08
# run ipython_tutorial/error.py with each of these modes.
# Tue, 02 Aug 2011 20:58:08
"""
# Tue, 02 Aug 2011 20:58:38
execdemo()
# Tue, 02 Aug 2011 21:22:22
cpaste
# Tue, 02 Aug 2011 21:22:29
import numpy as np
# Tue, 02 Aug 2011 21:22:33
cpaste
# Tue, 02 Aug 2011 21:22:36
a
#[Out]# array([[ 0,  1,  2,  3,  4,  5],
#[Out]#        [10, 11, 12, 13, 14, 15],
#[Out]#        [20, 21, 22, 23, 24, 25],
#[Out]#        [30, 31, 32, 33, 34, 35],
#[Out]#        [40, 41, 42, 43, 44, 45],
#[Out]#        [50, 51, 52, 53, 54, 55]])
# Tue, 02 Aug 2011 21:22:38
b
#[Out]# array([ 0, 10, 20, 30, 40, 50])
# Tue, 02 Aug 2011 21:23:12
a.strides
#[Out]# (48, 8)
# Tue, 02 Aug 2011 21:23:31
x = [1,2,3,4]
# Tue, 02 Aug 2011 21:23:36
x[1:3]
#[Out]# [2, 3]
# Tue, 02 Aug 2011 21:24:21
a[0, 3:5]
#[Out]# array([3, 4])
# Tue, 02 Aug 2011 21:24:49
a[4:,4:]
#[Out]# array([[44, 45],
#[Out]#        [54, 55]])
# Tue, 02 Aug 2011 21:26:05
a[:,2]
#[Out]# array([ 2, 12, 22, 32, 42, 52])
# Tue, 02 Aug 2011 21:26:15
a[2::2,::2]
#[Out]# array([[20, 22, 24],
#[Out]#        [40, 42, 44]])
# Tue, 02 Aug 2011 21:29:03
a[2::]
#[Out]# array([[20, 21, 22, 23, 24, 25],
#[Out]#        [30, 31, 32, 33, 34, 35],
#[Out]#        [40, 41, 42, 43, 44, 45],
#[Out]#        [50, 51, 52, 53, 54, 55]])
# Tue, 02 Aug 2011 21:29:12
a[2]
#[Out]# array([20, 21, 22, 23, 24, 25])
# Tue, 02 Aug 2011 21:29:14
a[2:]
#[Out]# array([[20, 21, 22, 23, 24, 25],
#[Out]#        [30, 31, 32, 33, 34, 35],
#[Out]#        [40, 41, 42, 43, 44, 45],
#[Out]#        [50, 51, 52, 53, 54, 55]])
# Tue, 02 Aug 2011 21:29:16
a[2::]
#[Out]# array([[20, 21, 22, 23, 24, 25],
#[Out]#        [30, 31, 32, 33, 34, 35],
#[Out]#        [40, 41, 42, 43, 44, 45],
#[Out]#        [50, 51, 52, 53, 54, 55]])
# Tue, 02 Aug 2011 21:29:18
a[2::2]
#[Out]# array([[20, 21, 22, 23, 24, 25],
#[Out]#        [40, 41, 42, 43, 44, 45]])
# Tue, 02 Aug 2011 21:29:31
a[2::2,::2]
#[Out]# array([[20, 22, 24],
#[Out]#        [40, 42, 44]])
# Tue, 02 Aug 2011 21:29:56
cpaste
# Tue, 02 Aug 2011 21:30:05
a[3]
#[Out]# array([30, 31, 32, 33, 34, 35])
# Tue, 02 Aug 2011 21:30:09
a[(3)]
#[Out]# array([30, 31, 32, 33, 34, 35])
# Tue, 02 Aug 2011 21:30:19
a[[3,]]
#[Out]# array([[30, 31, 32, 33, 34, 35]])
# Tue, 02 Aug 2011 21:30:35
a[np.array(3)]]
# Tue, 02 Aug 2011 21:30:37
a[np.array(3)]]
# Tue, 02 Aug 2011 21:30:38
a[np.array(3)]
#[Out]# array([30, 31, 32, 33, 34, 35])
# Tue, 02 Aug 2011 21:30:48
a[3,(1,2)]]
# Tue, 02 Aug 2011 21:30:50
a[3,(1,2)]
#[Out]# array([31, 32])
# Tue, 02 Aug 2011 21:31:36
a = arange(6)
# Tue, 02 Aug 2011 21:31:39
a = np.arange(6)
# Tue, 02 Aug 2011 21:31:40
a
#[Out]# array([0, 1, 2, 3, 4, 5])
# Tue, 02 Aug 2011 21:31:44
a.shape
#[Out]# (6,)
# Tue, 02 Aug 2011 21:32:18
a.shape = (2,3)
# Tue, 02 Aug 2011 21:32:20
a.shape
#[Out]# (2, 3)
# Tue, 02 Aug 2011 21:32:21
a
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5]])
# Tue, 02 Aug 2011 21:42:12
np.allclose
# Tue, 02 Aug 2011 22:02:24
add
# Tue, 02 Aug 2011 22:02:27
np.add
#[Out]# <ufunc 'add'>
# Tue, 02 Aug 2011 22:02:33
np.add(a)
# Tue, 02 Aug 2011 22:02:37
np.add(a,a)
#[Out]# array([[ 0,  2,  4],
#[Out]#        [ 6,  8, 10]])
# Tue, 02 Aug 2011 22:02:44
np.add.reduce(a,a)
# Tue, 02 Aug 2011 22:02:54
np.add(a,a).reduce
# Tue, 02 Aug 2011 22:03:08
reduce.add(a,b)
# Tue, 02 Aug 2011 22:03:20
np.add.reduce(a+a)
#[Out]# array([ 6, 10, 14])
# Tue, 02 Aug 2011 22:03:24
np.add.reduce(a)
#[Out]# array([3, 5, 7])
# Tue, 02 Aug 2011 22:04:31
sum.reduce(a,b)
# Tue, 02 Aug 2011 22:04:40
np.sum.add(a)
# Tue, 02 Aug 2011 22:04:44
np.sum.reduce(a)
# Tue, 02 Aug 2011 22:04:49
np.sum.reduce(a,a))
# Tue, 02 Aug 2011 22:14:01
np.multiply.reduce(a)
#[Out]# array([ 0,  4, 10])
# Tue, 02 Aug 2011 22:14:03
a
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5]])
# Tue, 02 Aug 2011 22:16:53
np.multiply.accumulate(a)
#[Out]# array([[ 0,  1,  2],
#[Out]#        [ 0,  4, 10]])
# Tue, 02 Aug 2011 22:16:54
a
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5]])
# Tue, 02 Aug 2011 22:18:12
np.multiply.accumulate(a,0)
#[Out]# array([[ 0,  1,  2],
#[Out]#        [ 0,  4, 10]])
# Tue, 02 Aug 2011 22:18:21
np.multiply.accumulate(a,1)
#[Out]# array([[ 0,  0,  0],
#[Out]#        [ 3, 12, 60]])
# Tue, 02 Aug 2011 22:20:44
a
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5]])
# Tue, 02 Aug 2011 22:20:59
np.add.accumulate(a)
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 5, 7]])
# Tue, 02 Aug 2011 22:21:16
np.add.accumulate(a,0)
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 5, 7]])
# Tue, 02 Aug 2011 22:21:17
np.add.accumulate(a,1)
#[Out]# array([[ 0,  1,  3],
#[Out]#        [ 3,  7, 12]])
# Tue, 02 Aug 2011 22:22:58
np.add.accumulate(a)
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 5, 7]])
# Tue, 02 Aug 2011 22:23:02
a
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5]])
# Tue, 02 Aug 2011 22:26:45
np.add.accumulate(a)
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 5, 7]])
# Tue, 02 Aug 2011 22:26:49
np.add.(a)
# Tue, 02 Aug 2011 22:26:50
a
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5]])
# Tue, 02 Aug 2011 22:26:53
np.add(a)
# Tue, 02 Aug 2011 22:26:57
np.add(a,a)
#[Out]# array([[ 0,  2,  4],
#[Out]#        [ 6,  8, 10]])
# Tue, 02 Aug 2011 22:27:56
np.add(a,a,1)
# Tue, 02 Aug 2011 22:28:05
np.add.reduce(a)
#[Out]# array([3, 5, 7])
# Tue, 02 Aug 2011 22:28:08
np.add.reduce(a,0)
#[Out]# array([3, 5, 7])
# Tue, 02 Aug 2011 22:28:10
np.add.reduce(a,1)
#[Out]# array([ 3, 12])
# Tue, 02 Aug 2011 22:28:16
a
#[Out]# array([[0, 1, 2],
#[Out]#        [3, 4, 5]])
# Tue, 02 Aug 2011 22:28:56
run demo.array.programming.py
# Tue, 02 Aug 2011 22:29:06
execdemo()
# Tue, 02 Aug 2011 22:29:06
# <demo> silent
# Tue, 02 Aug 2011 22:29:06
import sys
# Tue, 02 Aug 2011 22:29:06
import datetime
# Tue, 02 Aug 2011 22:29:06
import time
# Tue, 02 Aug 2011 22:29:06
import util
# Tue, 02 Aug 2011 22:29:06
DATE = 0
# Tue, 02 Aug 2011 22:29:06
OPEN = 1
# Tue, 02 Aug 2011 22:29:06
HIGH = 2
# Tue, 02 Aug 2011 22:29:06
LOW = 3
# Tue, 02 Aug 2011 22:29:06
CLOSE = 4
# Tue, 02 Aug 2011 22:29:06
VOLUME = 5
# Tue, 02 Aug 2011 22:29:06
ADJCLOSE = 6
# Tue, 02 Aug 2011 22:29:06
def reloadutil():
# Tue, 02 Aug 2011 22:29:06
    import __builtin__ as b
# Tue, 02 Aug 2011 22:29:06
    b.dreload(util)
# Tue, 02 Aug 2011 22:29:06
def counter():
# Tue, 02 Aug 2011 22:29:06
    x = [-1]
# Tue, 02 Aug 2011 22:29:06
    def function(message=''):
# Tue, 02 Aug 2011 22:29:06
        x[0] = x[0] + 1
# Tue, 02 Aug 2011 22:29:06
        thecount = x[0]
# Tue, 02 Aug 2011 22:29:06
        sep = "-" * max(9, len(message))
# Tue, 02 Aug 2011 22:29:06
        if not message == '':
# Tue, 02 Aug 2011 22:29:06
            sep += '\n'
# Tue, 02 Aug 2011 22:29:06
        print >> sys.stdout, '\n\n%(sep)s%(message)s\nslide: %(thecount)d' % vars()
# Tue, 02 Aug 2011 22:29:06
        
# Tue, 02 Aug 2011 22:29:06
    return function
# Tue, 02 Aug 2011 22:29:06
verbose = True
# Tue, 02 Aug 2011 22:29:06
slidecounter = counter()
# Tue, 02 Aug 2011 22:29:06
slidecounter('Initial Setup')
# Tue, 02 Aug 2011 22:29:10
execdemo()
# Tue, 02 Aug 2011 22:29:12
import numpy as np
# Tue, 02 Aug 2011 22:29:12
sqltable = 'sp500_small' if util.is32bit() else 'sp500'
# Tue, 02 Aug 2011 22:29:12
query = 'select * from %(sqltable)s order by date desc' % vars()
# Tue, 02 Aug 2011 22:29:12
################
# Tue, 02 Aug 2011 22:29:12
slidecounter() #
# Tue, 02 Aug 2011 22:29:12
################
# Tue, 02 Aug 2011 22:30:16
execdemo()
# Tue, 02 Aug 2011 22:30:18
(symbols, prices) = util.gethistprices(query, numrows=1000, verbose=verbose)
# Tue, 02 Aug 2011 22:32:00
################
# Tue, 02 Aug 2011 22:32:00
slidecounter() #
# Tue, 02 Aug 2011 22:32:00
################
# Tue, 02 Aug 2011 22:48:19
util.sqlpopulatedata(files=util.fixpath('data/csv/sp500/*.csv'), table='sp500')
# Tue, 02 Aug 2011 23:23:01
ls
# Tue, 02 Aug 2011 23:23:21
ls sphinxdoc/_static/standard-deviation.png
